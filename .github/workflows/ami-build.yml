name: Building AMI

on:
  push:
    branches:
      - main 

jobs:
  build:
    name: Building Machine Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure GCP Credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDS }}

      - name: Setting GCP SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Setting GCP Access Key
        working-directory: ami
        run: |
          echo '${{ secrets.GCP_CREDS }}' >> .gcp-key.json

      - name: Install Packer
        uses: hashicorp/setup-packer@main

      - name: Setting Environment Variables
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          cat .env

      - name: Build Application Artifact
        run: |
          mkdir -p build
          zip -r build/webapp.zip ./* .env # Include .env in the zip file
          ls -l build/webapp.zip # Debug: Verify the artifact is created

      - name: Copy Artifact and .env to AMI Directory
        run: |
          mkdir -p ami
          cp build/webapp.zip ami/webapp.zip
          cp .env ami/.env # Copy .env to the ami directory
          ls -l ami # Debug: Verify the contents of the ami directory

      - name: Packer Initialization
        working-directory: ami
        run: |
          ls -l
          packer init .

      - name: Validate Packer Template
        working-directory: ami
        env:
          AMI_USER: ${{ secrets.AWS_DEMO }}
        run: packer validate .

      - name: Build AMI with Packer
        working-directory: ami 
        env:
          AMI_USER: ${{ secrets.AWS_DEMO }}
          PACKER_DB_NAME: ${{ secrets.DB_NAME }}
          PACKER_DB_USER: ${{ secrets.DB_USER }}
          PACKER_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          packer build \
            -var "db_name=$PACKER_DB_NAME" \
            -var "db_user=$PACKER_DB_USER" \
            -var "db_password=$PACKER_DB_PASSWORD" \
            script.pkr.hcl

      - name: Share the AMI and Save AMI_ID
        id: share_ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
              --owners self \
              --filters "Name=state,Values=available" \
              --query "Images | sort_by(@, &CreationDate)[-1].ImageId" \
              --output text)
          if [ -n "$AMI_ID" ]; then
            echo "Sharing AMI $AMI_ID with DEMO account..."
            aws ec2 modify-image-attribute --image-id "$AMI_ID" \
              --launch-permission "{\"Add\": [{\"UserId\": \"${{ secrets.DEMO_USER }}\"}]}"
            echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
            echo "$AMI_ID" > ami_id.txt
          else
            echo "AMI not found, exiting."
            exit 1
          fi

      - name: Upload AMI_ID Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ami_id
          path: ami_id.txt

  autoscaling_refresh:
    name: Auto Scaling Group Launch Template & Instance Refresh
    needs: build
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      DEPLOY_ENVIRONMENT_ACCOUNT: ${{ secrets.DEPLOY_ENVIRONMENT_ACCOUNT }}
      LAUNCH_TEMPLATE_ID: ${{ secrets.LAUNCH_TEMPLATE_ID }}
      AUTO_SCALING_GROUP_NAME: ${{ secrets.AUTO_SCALING_GROUP_NAME }}
    steps:
      - name: Download AMI_ID Artifact
        uses: actions/download-artifact@v4
        with:
          name: ami_id

      - name: Read AMI_ID
        id: read_ami_id
        run: |
          AMI_ID=$(cat ami_id.txt)
          echo "AMI_ID: $AMI_ID"
          echo "ami_id=$AMI_ID" >> $GITHUB_ENV

      - name: Configure AWS Credentials for Dev
        if: ${{ env.DEPLOY_ENVIRONMENT_ACCOUNT == 'dev' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure AWS Credentials for Demo
        if: ${{ env.DEPLOY_ENVIRONMENT_ACCOUNT == 'demo' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Debug Launch Template ID
        run: |
          if [ -z "${{ secrets.LAUNCH_TEMPLATE_ID }}" ]; then
            echo "DEBUG: LAUNCH_TEMPLATE_ID is empty!"
          else
            echo "DEBUG: LAUNCH_TEMPLATE_ID is set."
          fi

      - name: Create New Launch Template Version
        id: create_lt_version
        run: |
          AMI_ID=${{ env.ami_id }}
          echo "Creating new Launch Template version with AMI ID: $AMI_ID"
          aws ec2 create-launch-template-version \
              --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
              --source-version 1 \
              --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
              --no-cli-pager

      - name: Start Instance Refresh
        id: start_refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
              --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }} \
              --query "InstanceRefreshId" \
              --output text \
              --no-cli-pager)
          echo "Instance Refresh started with ID: $REFRESH_ID"
          echo "instance_refresh_id=$REFRESH_ID" >> $GITHUB_ENV

      - name: Wait for Instance Refresh Completion
        run: |
          echo "Waiting for instance refresh to complete..."
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
                --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }} \
                --query "InstanceRefreshes[?InstanceRefreshId=='${{ env.instance_refresh_id }}'].Status" \
                --output text \
                --no-cli-pager)
            echo "Current status: $STATUS "
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance Refresh completed successfully."
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "Instance Refresh failed or was cancelled. Exiting."
              exit 1
            fi
            sleep 30
          done

        
